---
import Page from '../../components/layout/Page.astro';
import ArticleContent from '../../components/business/ArticleContent.astro';
import { ArticleService } from '../../services/ArticleService';
import { MarkdownRenderer } from '../../utils/markdown';
import { SITE_TITLE } from '../../consts';

// Get the article id from URL params
const { id } = Astro.params;

// Handle 404 if id is not provided
if (!id) {
	return Astro.redirect('/404');
}

// Get the article from database
const articleService = new ArticleService(Astro.locals.runtime.env.DB);
const article = await articleService.getBySlug(id);

// Handle 404 if article not found
if (!article) {
	return Astro.redirect('/404');
}

const markdownRenderer = MarkdownRenderer.getInstance();

// Check if article contains KaTeX syntax
const hasKaTeX = markdownRenderer.hasKaTeX(article.content);

// Get the first image from content or use avatar as fallback
const firstImage = markdownRenderer.getFirstImage(article.content) || '/avatar.png';

// Get the canonical URL for the article
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Create a brief description from the content (first 160 characters)
const description = article.content
  .replace(/[#*`]/g, '') // Remove markdown syntax
  .slice(0, 160)
  .trim() + '...';
---

<Page>
	<Fragment slot="head">
		{hasKaTeX && (
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
		)}
		<meta property="og:title" content={`${article.title} - ${SITE_TITLE}`} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={new URL(firstImage, Astro.site)} />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:type" content="article" />
		<meta property="article:published_time" content={article.createdDate.toISOString()} />
		{article.updatedDate && (
			<meta property="article:modified_time" content={article.updatedDate.toISOString()} />
		)}
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={`${article.title} - ${SITE_TITLE}`} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={new URL(firstImage, Astro.site)} />
		<link rel="canonical" href={canonicalURL} />
	</Fragment>
	<ArticleContent
		title={article.title}
		createdDate={article.createdDate}
		updatedDate={article.updatedDate}
	>
		<div class="markdown-content" set:html={article.rendered} />
	</ArticleContent>
</Page>

<style is:global>
	.markdown-content {
		@apply prose prose-invert max-w-none;
	}
	.markdown-content pre {
		@apply p-4 rounded-lg;
		background-color: #0d1117;
	}
	.markdown-content code {
		@apply text-sm;
	}
	.markdown-content :not(pre) > code {
		@apply px-1.5 py-0.5 rounded-md bg-gray-800;
	}
</style>

