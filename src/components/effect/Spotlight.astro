---
interface Props {
  /**
   * The opacity of the spotlight effect
   */
  opacity?: number;
  /**
   * The blur radius of the spotlight effect
   */
  blur?: number;
  /**
   * The color of the spotlight
   */
  color?: string;
  /**
   * The horizontal position of the spotlight in percentage
   */
  position?: number;
  /**
   * The rotation angle in degrees
   */
  rotate?: number;
  /**
   * The width of the beam at the top
   */
  topWidth?: number;
  /**
   * The width of the beam at the bottom
   */
  bottomWidth?: number;
  /**
   * Mobile specific properties
   */
  mobileOpacity?: number;
  mobileBlur?: number;
  mobileTopWidth?: number;
  mobileBottomWidth?: number;
}

const {
  opacity = 0.6,
  blur = 48,
  color = "#ffecd1",
  position = 15,
  rotate = 68,
  topWidth = 460,
  bottomWidth = 1680,
  mobileOpacity,
  mobileBlur = 60,
  mobileTopWidth = 420,
  mobileBottomWidth = 1400,
} = Astro.props;

// Convert position to actual coordinates
const viewBoxWidth = 2400;
const viewBoxHeight = 2400;
const x = (position / 100) * viewBoxWidth;

// Calculate rotated coordinates
const rad = (rotate * Math.PI) / 180;
const dx = Math.sin(rad) * viewBoxHeight * 0.4;

// Calculate half widths for easier path construction
const halfTopWidth = topWidth / 2;
const halfBottomWidth = bottomWidth / 2;
const halfMobileTopWidth = mobileTopWidth / 2;
const halfMobileBottomWidth = mobileBottomWidth / 2;

// Client-side detection script
const clientScript = `
  document.addEventListener('DOMContentLoaded', () => {
    const isMobile = window.innerWidth <= 540;
    const spotlightBeam = document.querySelector('.spotlight-beam');
    const container = document.querySelector('.spotlight-container');

    if (isMobile && spotlightBeam) {
      // Mobile position adjustment - shift to the right
      const mobileX = ${x} + ${viewBoxWidth * 0.08};

      // Apply mobile-specific attributes with adjusted position
      spotlightBeam.setAttribute('d', \`
        M \${mobileX - ${halfMobileTopWidth}} -100
        L \${mobileX - ${halfMobileBottomWidth} + ${dx}} ${viewBoxHeight + 100}
        L \${mobileX + ${halfMobileBottomWidth} + ${dx}} ${viewBoxHeight + 100}
        L \${mobileX + ${halfMobileTopWidth}} -100
        Z
      \`);

      // Update animation values for mobile with adjusted position
      const animateD = spotlightBeam.querySelector('animate[attributeName="d"]');
      if (animateD) {
        animateD.setAttribute('values', \`
          M \${mobileX - ${halfMobileTopWidth}} -100
          L \${mobileX - ${halfMobileTopWidth} * 1.2 + ${dx}} ${viewBoxHeight + 100}
          L \${mobileX + ${halfMobileTopWidth} * 1.2 + ${dx}} ${viewBoxHeight + 100}
          L \${mobileX + ${halfMobileTopWidth}} -100
          Z;
          M \${mobileX - ${halfMobileTopWidth}} -100
          L \${mobileX - ${halfMobileBottomWidth} + ${dx}} ${viewBoxHeight + 100}
          L \${mobileX + ${halfMobileBottomWidth} + ${dx}} ${viewBoxHeight + 100}
          L \${mobileX + ${halfMobileTopWidth}} -100
          Z
        \`);
      }

      // Apply mobile opacity if provided
      if (${mobileOpacity !== undefined}) {
        const animateOpacity = spotlightBeam.querySelector('animate[attributeName="opacity"]');
        if (animateOpacity) {
          animateOpacity.setAttribute('values', \`0;${mobileOpacity || opacity * 0.8}\`);
        }
      }

      // Add mobile-specific class
      container.classList.add('mobile');
    }
  });
`;
---

<div class="spotlight-container" transition:persist>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="100%"
    height="100%"
    viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}
    preserveAspectRatio="xMidYMid slice"
  >
    <defs>
      <filter id="spotlight-blur" color-interpolation-filters="sRGB">
        <feGaussianBlur stdDeviation={blur} />
      </filter>
      <filter id="spotlight-blur-mobile" color-interpolation-filters="sRGB">
        <feGaussianBlur stdDeviation={mobileBlur} />
      </filter>
      <linearGradient id="spotlight-gradient" x1="0.5" y1="0" x2="0.5" y2="1">
        <stop offset="0" stop-color={color} stop-opacity={opacity* 0.65} />
        <stop offset="0.2" stop-color={color} stop-opacity={opacity * 0.85} />
        <stop offset="0.4" stop-color={color} stop-opacity={opacity * 0.6} />
        <stop offset="0.685" stop-color={color} stop-opacity={opacity * 0.3} />
        <stop offset="1" stop-color={color} stop-opacity={opacity * 0.1} />
      </linearGradient>
    </defs>
    <path
      class="spotlight-beam"
      d={`
        M ${x - halfTopWidth} -100
        L ${x - halfBottomWidth + dx} ${viewBoxHeight + 100}
        L ${x + halfBottomWidth + dx} ${viewBoxHeight + 100}
        L ${x + halfTopWidth} -100
        Z
      `}
      fill="url(#spotlight-gradient)"
      filter="url(#spotlight-blur)"
      opacity="0"
    >
      <animate
        attributeName="d"
        dur="1.2s"
        begin="0s"
        fill="freeze"
        calcMode="spline"
        keySplines="0.4 0 0.2 1"
        values={`
          M ${x - halfTopWidth} -100
          L ${x - halfTopWidth * 1.2 + dx} ${viewBoxHeight + 100}
          L ${x + halfTopWidth * 1.2 + dx} ${viewBoxHeight + 100}
          L ${x + halfTopWidth} -100
          Z;
          M ${x - halfTopWidth} -100
          L ${x - halfBottomWidth + dx} ${viewBoxHeight + 100}
          L ${x + halfBottomWidth + dx} ${viewBoxHeight + 100}
          L ${x + halfTopWidth} -100
          Z
        `}
      />
      <animate
        attributeName="opacity"
        dur="1.2s"
        begin="0s"
        fill="freeze"
        calcMode="spline"
        keySplines="0.4 0 0.2 1"
        values=`0;${opacity}`
      />
    </path>
  </svg>
</div>

<script set:html={clientScript}></script>

<style define:vars={{ x, dx, halfTopWidth, halfBottomWidth, halfMobileTopWidth, halfMobileBottomWidth }}>
  .spotlight-container {
    position: fixed;
    inset: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 0;
    overflow: hidden;
    mix-blend-mode: plus-lighter;
    filter: blur(4px);
  }

  .spotlight-container.mobile {
    filter: blur(8px);
    mix-blend-mode: screen;
  }

  @media (prefers-reduced-motion: reduce) {
    .spotlight-beam {
      opacity: var(--opacity) !important;
    }
  }

  @media screen and (max-width: 768px) {
    .spotlight-container {
      filter: blur(8px);
      mix-blend-mode: screen;
    }

    .spotlight-beam {
      filter: url(#spotlight-blur-mobile) !important;
    }
  }
</style>
